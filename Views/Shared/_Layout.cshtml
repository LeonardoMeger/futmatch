@{
    var currentUser = ViewBag.CurrentUser as FutMatchApp.Models.User;
    var currentTeam = ViewBag.CurrentTeam as FutMatchApp.Models.Team;
}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Sistema de Reserva de Quadras</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
            <div class="container">
                <!-- Logo principal do site -->
                <a class="navbar-brand" href="@Url.Action("Index", "Home")">
                    ⚽ FutMatch
                </a>

                <!-- Botão de toggle para mobile -->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarNav">
                    <!-- Menu principal -->
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Home")">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Reservation")">Minhas Reservas</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Available", "Reservation")">Desafios</a>
                        </li>
                    </ul>

                    <!-- Área do usuário/time -->
                    <ul class="navbar-nav">
                        @if (User.Identity.IsAuthenticated && currentUser != null)
                        {
                            <!-- NOTIFICAÇÕES - Dropdown completo -->
                            <li class="nav-item dropdown me-2">
                                <button class="btn btn-link nav-link position-relative dropdown-toggle"
                                        type="button"
                                        id="notificationsDropdown"
                                        data-bs-toggle="dropdown"
                                        aria-expanded="false"
                                        style="border: none; color: rgba(255,255,255,.55);">
                                    <i class="fas fa-bell"></i>
                                    <span id="notification-badge"
                                          class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                          style="display: none; font-size: 0.65rem;">
                                        0
                                    </span>
                                </button>

                                <div class="dropdown-menu dropdown-menu-end notification-menu p-0"
                                     aria-labelledby="notificationsDropdown">

                                    <!-- Cabeçalho -->
                                    <div class="notification-header d-flex justify-content-between align-items-center p-3 bg-primary text-white">
                                        <h6 class="mb-0 fw-bold">
                                            <i class="fas fa-bell me-2"></i>
                                            Notificações
                                        </h6>
                                        <div class="d-flex gap-1">
                                            <button type="button"
                                                    class="btn btn-sm btn-outline-light"
                                                    onclick="markAllNotificationsAsRead()"
                                                    title="Marcar todas como lidas">
                                                <i class="fas fa-check-double fa-sm"></i>
                                            </button>
                                            <a href="/Notification/Index" class="btn btn-sm btn-outline-light" title="Ver todas">
                                                <i class="fas fa-list fa-sm"></i>
                                            </a>
                                        </div>
                                    </div>

                                    <!-- Lista de Notificações -->
                                    <div id="notificationsList" class="notification-list">
                                        <div class="notification-loading text-center py-4">
                                            <div class="spinner-border spinner-border-sm text-primary mb-2" role="status">
                                                <span class="visually-hidden">Carregando...</span>
                                            </div>
                                            <p class="text-muted mb-0 small">Carregando notificações...</p>
                                        </div>
                                    </div>

                                    <!-- Rodapé -->
                                    <div class="notification-footer text-center py-2 bg-light border-top">
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle me-1"></i>
                                            Últimas 10 notificações
                                        </small>
                                    </div>
                                </div>
                            </li>

                            <!-- Mostrar time selecionado -->
                            @if (currentTeam != null)
                            {
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown">
                                        @if (!string.IsNullOrEmpty(currentTeam.FotoUrl))
                                        {
                                            <img src="@currentTeam.FotoUrl" alt="Logo @currentTeam.Nome"
                                                 class="rounded-circle me-2" style="width: 32px; height: 32px; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <!-- Ícone padrão se não houver logo -->
                                            <div class="rounded-circle me-2 d-flex align-items-center justify-content-center"
                                                 style="width: 32px; height: 32px; background-color: @(currentTeam.CorPrimaria ?? "#007bff"); color: white; font-weight: bold;">
                                                @currentTeam.Nome.Substring(0, 1).ToUpper()
                                            </div>
                                        }
                                        <span class="d-none d-md-inline">@currentTeam.Nome</span>
                                    </a>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li><a class="dropdown-item" href="@Url.Action("Index", "Profile")">Perfil</a></li>
                                        <li><a class="dropdown-item" href="@Url.Action("Index", "Team")">Meus Times</a></li>
                                        <li><a class="dropdown-item" href="@Url.Action("ChangePassword", "Account")">Redefinir Senha</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="@Url.Action("Logout", "Account")">Sair</a></li>
                                    </ul>
                                </li>
                            }
                            else
                            {
                                <!-- Se não tem time selecionado -->
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-user"></i> @currentUser.Nome
                                    </a>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li>
                                            <a class="dropdown-item text-warning" href="@Url.Action("Index", "Profile")">
                                                <i class="fas fa-exclamation-triangle me-1"></i> Selecionar Time
                                            </a>
                                        </li>
                                        <li><a class="dropdown-item" href="@Url.Action("Index", "Team")">Meus Times</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="@Url.Action("Logout", "Account")">Sair</a></li>
                                    </ul>
                                </li>
                            }
                        }
                        else
                        {
                            <!-- Links para usuários não autenticados -->
                            <li class="nav-item">
                                <a class="nav-link" href="@Url.Action("Login", "Account")">Login</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="@Url.Action("Register", "Account")">Cadastrar</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <div class="container mt-4">
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i>@TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>@TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <!-- Modal de Confirmação de Ação -->
    <div class="modal fade" id="confirmActionModal" tabindex="-1">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" id="confirmActionTitle">Confirmar Ação</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p id="confirmActionMessage">Tem certeza que deseja realizar esta ação?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary btn-sm" id="confirmActionButton">Confirmar</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="confirmActionModal" tabindex="-1">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" id="confirmActionTitle">Confirmar Ação</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p id="confirmActionMessage">Tem certeza que deseja realizar esta ação?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary btn-sm" id="confirmActionButton">Confirmar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Resultado da Partida -->
    <div class="modal fade" id="matchResultModal" tabindex="-1" aria-labelledby="matchResultModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content border-0 shadow-lg">
                <!-- Header da Modal -->
                <div class="modal-header bg-gradient text-white position-relative" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="d-flex align-items-center">
                        <div class="modal-icon me-3">
                            <i class="fas fa-trophy fa-2x"></i>
                        </div>
                        <div>
                            <h5 class="modal-title mb-1 fw-bold" id="matchResultModalLabel">
                                Como foi a partida?
                            </h5>
                            <small class="opacity-75" id="matchDetails">
                                Informe o resultado da sua última partida
                            </small>
                        </div>
                    </div>
                    <!-- Efeitos visuais de fundo -->
                    <div class="position-absolute top-0 end-0 p-3 opacity-25">
                        <i class="fas fa-futbol fa-3x"></i>
                    </div>
                </div>

                <!-- Corpo da Modal -->
                <div class="modal-body p-4">
                    <!-- Informações da Partida -->
                    <div class="match-info-card bg-light rounded-3 p-3 mb-4">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <h6 class="fw-bold text-primary mb-2">
                                    <i class="fas fa-calendar-alt me-2"></i>
                                    <span id="matchDateTime">--/--/---- --:--</span>
                                </h6>
                                <p class="text-muted mb-1">
                                    <i class="fas fa-map-marker-alt me-2"></i>
                                    <span id="matchCourt">Carregando...</span>
                                </p>
                                <p class="text-muted mb-0 small">
                                    <i class="fas fa-clock me-2"></i>
                                    Duração: <span id="matchDuration">-- hora(s)</span>
                                </p>
                            </div>
                            <div class="col-md-4 text-center">
                                <div class="match-status-badge">
                                    <span class="badge bg-success fs-6 py-2 px-3 rounded-pill">
                                        <i class="fas fa-check-circle me-1"></i>
                                        Partida Finalizada
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Formulário de Resultado -->
                    <form id="matchResultForm" novalidate>
                        <!-- Teams Display -->
                        <div class="teams-container mb-4">
                            <div class="row align-items-center">
                                <!-- Meu Time -->
                                <div class="col-5">
                                    <div class="team-card text-center p-3 bg-primary bg-opacity-10 rounded-3 border border-primary border-opacity-25">
                                        <div class="team-name mb-2">
                                            <i class="fas fa-users text-primary me-2"></i>
                                            <span class="fw-bold" id="myTeamName">Meu Time</span>
                                        </div>
                                        <div class="team-label">
                                            <small class="text-primary fw-semibold">SEU TIME</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- VS -->
                                <div class="col-2 text-center">
                                    <div class="vs-container">
                                        <span class="badge bg-secondary fs-6 px-3 py-2 rounded-pill">VS</span>
                                    </div>
                                </div>

                                <!-- Time Adversário -->
                                <div class="col-5">
                                    <div class="team-card text-center p-3 bg-danger bg-opacity-10 rounded-3 border border-danger border-opacity-25">
                                        <div class="team-name mb-2">
                                            <i class="fas fa-users text-danger me-2"></i>
                                            <span class="fw-bold" id="opponentTeamName">Time Adversário</span>
                                        </div>
                                        <div class="team-label">
                                            <small class="text-danger fw-semibold">ADVERSÁRIO</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Inputs de Gols -->
                        <div class="goals-container">
                            <div class="row justify-content-center align-items-center">
                                <!-- Gols do Meu Time -->
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="form-label fw-bold text-primary text-center d-block mb-2">
                                            <i class="fas fa-futbol me-1"></i>
                                            Gols do seu time
                                        </label>
                                        <div class="goal-input-container">
                                            <input type="number"
                                                   class="form-control form-control-lg text-center fw-bold goal-input"
                                                   id="myGoals"
                                                   name="myGoals"
                                                   min="0"
                                                   max="50"
                                                   value="0"
                                                   required
                                                   style="font-size: 2rem; height: 70px; border-color: #0d6efd;">
                                            <div class="goal-controls mt-2">
                                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="decrementGoals('myGoals')">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-primary btn-sm ms-1" onclick="incrementGoals('myGoals')">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="invalid-feedback text-center">
                                            Por favor, informe o número de gols (0-50)
                                        </div>
                                    </div>
                                </div>

                                <!-- Separador X -->
                                <div class="col-1 text-center">
                                    <span class="display-4 fw-bold text-muted">×</span>
                                </div>

                                <!-- Gols do Time Adversário -->
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="form-label fw-bold text-danger text-center d-block mb-2">
                                            <i class="fas fa-futbol me-1"></i>
                                            Gols do adversário
                                        </label>
                                        <div class="goal-input-container">
                                            <input type="number"
                                                   class="form-control form-control-lg text-center fw-bold goal-input"
                                                   id="opponentGoals"
                                                   name="opponentGoals"
                                                   min="0"
                                                   max="50"
                                                   value="0"
                                                   required
                                                   style="font-size: 2rem; height: 70px; border-color: #dc3545;">
                                            <div class="goal-controls mt-2">
                                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="decrementGoals('opponentGoals')">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger btn-sm ms-1" onclick="incrementGoals('opponentGoals')">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="invalid-feedback text-center">
                                            Por favor, informe o número de gols (0-50)
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Preview do Resultado -->
                            <div class="result-preview mt-4">
                                <div class="alert alert-info text-center" id="resultPreview" style="display: none;">
                                    <i class="fas fa-info-circle me-2"></i>
                                    <strong>Resultado: </strong>
                                    <span id="resultText">0 × 0 - Empate</span>
                                </div>
                            </div>
                        </div>

                        <!-- Mensagem de Erro -->
                        <div class="alert alert-danger d-none mt-3" id="errorMessage" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span id="errorText">Erro ao processar resultado</span>
                        </div>
                    </form>
                </div>

                <!-- Footer da Modal -->
                <div class="modal-footer bg-light d-flex justify-content-between align-items-center">
                    <div class="text-muted small">
                        <i class="fas fa-info-circle me-1"></i>
                        O resultado será salvo e ambos os times serão notificados
                    </div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-secondary" onclick="skipMatchResult()">
                            <i class="fas fa-times me-1"></i>
                            Pular por Agora
                        </button>
                        <button type="button" class="btn btn-primary px-4" onclick="submitMatchResult()">
                            <i class="fas fa-save me-2"></i>
                            Salvar Resultado
                            <span class="spinner-border spinner-border-sm ms-2 d-none" id="submitSpinner"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer class="border-top footer text-muted bg-light mt-5">
        <div class="container py-3">
            <div class="row">
                <div class="col-md-6">
                    <p>&copy; 2025 - Sistema de Reserva de Quadras</p>
                </div>
                <div class="col-md-6 text-end">
                    <small>Desenvolvido com ASP.NET Core MVC</small>
                </div>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Scripts de Notificações (apenas para usuários logados) -->
    @if (User.Identity.IsAuthenticated)
    {
        <script>
            // Configurações globais das notificações
            const NOTIFICATION_CONFIG = {
                updateInterval: 15000, // 15 segundos
                maxRetries: 3,
                endpoints: {
                    get: '/Home/GetNotifications',
                    markAsRead: '/Home/MarkNotificationAsRead',
                    markAllAsRead: '/Home/MarkAllNotificationsAsRead',
                    acceptChallenge: '/Notification/AcceptChallenge',
                    rejectChallenge: '/Notification/RejectChallenge'
                }
            };

            let notificationUpdateInterval;
            let retryCount = 0;
            let pendingAction = null;

            // Inicialização
            document.addEventListener('DOMContentLoaded', function () {
                initializeNotifications();
            });

            function initializeNotifications() {
                loadNotifications();

                // Configurar atualização automática
                notificationUpdateInterval = setInterval(loadNotifications, NOTIFICATION_CONFIG.updateInterval);

                // Limpar interval ao sair da página
                window.addEventListener('beforeunload', function () {
                    if (notificationUpdateInterval) {
                        clearInterval(notificationUpdateInterval);
                    }
                });
            }

            // Carregar notificações
            async function loadNotifications() {
                try {
                    const response = await fetch(NOTIFICATION_CONFIG.endpoints.get);
                    const result = await response.json();

                    if (result.success) {
                        updateNotificationBadge(result.unreadCount);
                        renderNotifications(result.notifications);
                        retryCount = 0;
                    } else {
                        handleNotificationError('Erro ao carregar notificações: ' + result.message);
                    }
                } catch (error) {
                    console.error('Erro na requisição de notificações:', error);
                    handleNotificationError('Erro de conexão');
                }
            }

            function handleNotificationError(message) {
                retryCount++;

                if (retryCount <= NOTIFICATION_CONFIG.maxRetries) {
                    console.log(`Tentativa ${retryCount} de ${NOTIFICATION_CONFIG.maxRetries}`);
                    setTimeout(loadNotifications, 5000);
                    return;
                }

                const container = document.getElementById('notificationsList');
                if (container) {
                    container.innerHTML = `
                                    <div class="notification-error text-center py-4">
                                        <i class="fas fa-exclamation-triangle text-warning fa-2x mb-2"></i>
                                        <p class="text-muted mb-2">${message}</p>
                                        <button class="btn btn-sm btn-outline-primary" onclick="loadNotifications()">
                                            <i class="fas fa-retry me-1"></i>Tentar Novamente
                                        </button>
                                    </div>
                                `;
                }
            }

            // Atualizar badge de notificações
            function updateNotificationBadge(count) {
                const badge = document.getElementById('notification-badge');
                const dropdown = document.getElementById('notificationsDropdown');

                if (badge) {
                    if (count > 0) {
                        badge.textContent = count > 99 ? '99+' : count;
                        badge.style.display = 'block';
                        if (dropdown) dropdown.classList.add('has-notifications');
                    } else {
                        badge.style.display = 'none';
                        if (dropdown) dropdown.classList.remove('has-notifications');
                    }
                }
            }

            // Renderizar lista de notificações
            function renderNotifications(notifications) {
                const container = document.getElementById('notificationsList');
                if (!container) return;

                if (notifications.length === 0) {
                    container.innerHTML = `
                                    <div class="notification-empty text-center py-4">
                                        <i class="fas fa-bell-slash text-muted fa-2x mb-2"></i>
                                        <h6 class="text-muted mb-1">Nenhuma notificação</h6>
                                        <p class="text-muted small mb-0">Você está em dia!</p>
                                    </div>
                                `;
                    return;
                }

                // Limitar a 8 notificações no dropdown
                const limitedNotifications = notifications.slice(0, 8);
                const notificationsHtml = limitedNotifications.map(notification =>
                    createNotificationItem(notification)
                ).join('');

                container.innerHTML = notificationsHtml;
            }

            // Criar item individual de notificação
            function createNotificationItem(notification) {
                const isUnread = !notification.lida;
                const icon = getNotificationIcon(notification.tipo);

                let actionsHtml = '';
                if (notification.tipo === 'DesafioRecebido') {
                    actionsHtml = `
                                    <div class="notification-actions mt-2 d-flex gap-1">
                                        <button class="btn btn-success btn-sm flex-grow-1"
                                                onclick="handleChallengeAction(${notification.id}, 'accept', 'Aceitar')">
                                            <i class="fas fa-check fa-sm"></i> Aceitar
                                        </button>
                                        <button class="btn btn-danger btn-sm flex-grow-1"
                                                onclick="handleChallengeAction(${notification.id}, 'reject', 'Rejeitar')">
                                            <i class="fas fa-times fa-sm"></i> Rejeitar
                                        </button>
                                    </div>
                                `;
                }

                return `
                                <div class="notification-item ${isUnread ? 'unread' : ''}"
                                     data-notification-id="${notification.id}"
                                     onclick="markNotificationAsRead(${notification.id})">

                                    <div class="notification-content d-flex p-3">
                                        <div class="notification-icon me-3">
                                            ${icon}
                                        </div>

                                        <div class="notification-body flex-grow-1">
                                            <div class="notification-title fw-bold ${isUnread ? 'text-primary' : ''} mb-1" style="font-size: 0.9rem;">
                                                ${notification.titulo}
                                                ${isUnread ? '<span class="badge bg-primary ms-1" style="font-size: 0.6rem;">Nova</span>' : ''}
                                            </div>

                                            <div class="notification-message text-muted mb-1" style="font-size: 0.8rem;">
                                                ${notification.mensagem}
                                            </div>

                                            <div class="notification-time text-muted" style="font-size: 0.7rem;">
                                                <i class="fas fa-clock me-1"></i>${notification.dataCriacao}
                                            </div>

                                            ${actionsHtml}
                                        </div>

                                        ${isUnread ? '<div class="notification-indicator"></div>' : ''}
                                    </div>
                                </div>
                            `;
            }

            // Obter ícone baseado no tipo de notificação
            function getNotificationIcon(tipo) {
                const icons = {
                    'DesafioEnviado': '<div class="icon-wrapper bg-warning"><i class="fas fa-paper-plane text-white fa-sm"></i></div>',
                    'DesafioRecebido': '<div class="icon-wrapper bg-info"><i class="fas fa-handshake text-white fa-sm"></i></div>',
                    'DesafioAceito': '<div class="icon-wrapper bg-success"><i class="fas fa-check text-white fa-sm"></i></div>',
                    'PartidaConfirmada': '<div class="icon-wrapper bg-primary"><i class="fas fa-calendar-check text-white fa-sm"></i></div>',
                    'DesafioRejeitado': '<div class="icon-wrapper bg-danger"><i class="fas fa-times text-white fa-sm"></i></div>',
                    'ResultadoPartida': '<div class="icon-wrapper bg-dark"><i class="fas fa-trophy text-white fa-sm"></i></div>',
                    'LembretePartida': '<div class="icon-wrapper bg-secondary"><i class="fas fa-bell text-white fa-sm"></i></div>'
                };

                return icons[tipo] || '<div class="icon-wrapper bg-secondary"><i class="fas fa-bell text-white fa-sm"></i></div>';
            }

            // Marcar notificação como lida
            async function markNotificationAsRead(notificationId) {
                try {
                    const response = await fetch(NOTIFICATION_CONFIG.endpoints.markAsRead, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `notificationId=${notificationId}`
                    });

                    const result = await response.json();

                    if (result.success) {
                        const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                        if (notificationElement) {
                            notificationElement.classList.remove('unread');

                            const badge = notificationElement.querySelector('.badge:not(.bg-success):not(.bg-danger)');
                            if (badge) badge.remove();

                            const indicator = notificationElement.querySelector('.notification-indicator');
                            if (indicator) indicator.remove();

                            const title = notificationElement.querySelector('.notification-title');
                            if (title) title.classList.remove('text-primary');
                        }

                        setTimeout(loadNotifications, 500);
                    }
                } catch (error) {
                    console.error('Erro ao marcar notificação como lida:', error);
                }
            }

            // Marcar todas as notificações como lidas
            async function markAllNotificationsAsRead() {
                try {
                    const response = await fetch(NOTIFICATION_CONFIG.endpoints.markAllAsRead, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        loadNotifications();
                        showToast('Todas as notificações foram marcadas como lidas', 'success');
                    }
                } catch (error) {
                    console.error('Erro ao marcar todas as notificações como lidas:', error);
                    showToast('Erro ao marcar notificações', 'error');
                }
            }

            // Lidar com ações de desafio (aceitar/rejeitar)
            function handleChallengeAction(notificationId, action, actionText) {
                pendingAction = { notificationId, action, actionText };

                const modal = new bootstrap.Modal(document.getElementById('confirmActionModal'));

                const title = action === 'accept' ? 'Aceitar Desafio' : 'Rejeitar Desafio';
                const message = action === 'accept' ?
                    'Tem certeza que deseja aceitar este desafio? A partida será confirmada automaticamente.' :
                    'Tem certeza que deseja rejeitar este desafio? O time será notificado.';

                document.getElementById('confirmActionTitle').textContent = title;
                document.getElementById('confirmActionMessage').textContent = message;

                const confirmBtn = document.getElementById('confirmActionButton');
                confirmBtn.textContent = actionText;
                confirmBtn.className = `btn btn-sm ${action === 'accept' ? 'btn-success' : 'btn-danger'}`;

                modal.show();
            }

            // Confirmar ação do modal
            document.getElementById('confirmActionButton').addEventListener('click', async function () {
                if (!pendingAction) return;

                const { notificationId, action } = pendingAction;
                const endpoint = action === 'accept' ?
                    NOTIFICATION_CONFIG.endpoints.acceptChallenge :
                    NOTIFICATION_CONFIG.endpoints.rejectChallenge;

                // Mostrar loading no botão
                const confirmBtn = this;
                const originalText = confirmBtn.innerHTML;
                confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processando...';
                confirmBtn.disabled = true;

                try {
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `notificationId=${notificationId}`
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Atualizar a notificação localmente antes de recarregar
                        updateNotificationAfterAction(notificationId, action);

                        showToast(result.message, 'success');

                        // Fechar modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('confirmActionModal'));
                        modal.hide();

                        // Recarregar notificações após um delay para mostrar a mudança
                        setTimeout(() => {
                            loadNotifications();
                        }, 1500);
                    } else {
                        showToast(result.message, 'error');
                    }
                } catch (error) {
                    console.error('Erro na ação de desafio:', error);
                    showToast('Erro ao processar ação', 'error');
                } finally {
                    // Restaurar botão
                    confirmBtn.innerHTML = originalText;
                    confirmBtn.disabled = false;
                }

                pendingAction = null;
            });

            // Função para atualizar notificação após ação
            function updateNotificationAfterAction(notificationId, action) {
                const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (!notificationElement) return;

                // Remover botões de ação
                const actionsDiv = notificationElement.querySelector('.notification-actions');
                if (actionsDiv) {
                    actionsDiv.remove();
                }

                // Atualizar conteúdo baseado na ação
                const titleElement = notificationElement.querySelector('.notification-title');
                const messageElement = notificationElement.querySelector('.notification-message');
                const iconElement = notificationElement.querySelector('.icon-wrapper');

                if (action === 'accept') {
                    // Desafio aceito
                    titleElement.innerHTML = 'Desafio Aceito! <span class="badge bg-success ms-1" style="font-size: 0.6rem;">Confirmado</span>';
                    messageElement.textContent = 'Você aceitou o desafio. A partida foi confirmada!';
                    iconElement.className = 'icon-wrapper bg-success';
                    iconElement.innerHTML = '<i class="fas fa-check text-white fa-sm"></i>';

                    // Adicionar informação de status
                    const bodyElement = notificationElement.querySelector('.notification-body');
                    bodyElement.insertAdjacentHTML('beforeend', `
                                    <div class="notification-status mt-2 p-2 bg-success bg-opacity-10 rounded">
                                        <small class="text-success">
                                            <i class="fas fa-calendar-check me-1"></i>
                                            Partida confirmada e agendada
                                        </small>
                                    </div>
                                `);
                } else if (action === 'reject') {
                    // Desafio rejeitado
                    titleElement.innerHTML = 'Desafio Rejeitado <span class="badge bg-danger ms-1" style="font-size: 0.6rem;">Recusado</span>';
                    messageElement.textContent = 'Você rejeitou este desafio. O time foi notificado.';
                    iconElement.className = 'icon-wrapper bg-danger';
                    iconElement.innerHTML = '<i class="fas fa-times text-white fa-sm"></i>';

                    // Adicionar informação de status
                    const bodyElement = notificationElement.querySelector('.notification-body');
                    bodyElement.insertAdjacentHTML('beforeend', `
                                    <div class="notification-status mt-2 p-2 bg-danger bg-opacity-10 rounded">
                                        <small class="text-danger">
                                            <i class="fas fa-times-circle me-1"></i>
                                            Desafio rejeitado
                                        </small>
                                    </div>
                                `);
                }

                // Marcar como lida e remover indicadores
                notificationElement.classList.remove('unread');
                const badge = notificationElement.querySelector('.badge:not(.bg-success):not(.bg-danger)');
                if (badge) badge.remove();

                const indicator = notificationElement.querySelector('.notification-indicator');
                if (indicator) indicator.remove();

                titleElement.classList.remove('text-primary');

                // Adicionar efeito visual de atualização
                notificationElement.style.transform = 'scale(0.98)';
                notificationElement.style.transition = 'all 0.3s ease';

                setTimeout(() => {
                    notificationElement.style.transform = 'scale(1)';
                    notificationElement.style.background = action === 'accept' ? '#f0f9f0' : '#f9f0f0';

                    setTimeout(() => {
                        notificationElement.style.background = '';
                    }, 2000);
                }, 100);
            }

            // Mostrar toast de feedback
            function showToast(message, type = 'info') {
                const existingToast = document.getElementById('notificationToast');
                if (existingToast) {
                    existingToast.remove();
                }

                const toastClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-info';

                const toastHtml = `
                                <div class="toast align-items-center text-white ${toastClass} border-0 position-fixed"
                                     id="notificationToast"
                                     role="alert"
                                     style="top: 80px; right: 20px; z-index: 1055;">
                                    <div class="d-flex">
                                        <div class="toast-body">
                                            ${message}
                                        </div>
                                        <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                                data-bs-dismiss="toast"></button>
                                    </div>
                                </div>
                            `;

                document.body.insertAdjacentHTML('beforeend', toastHtml);

                const toastElement = document.getElementById('notificationToast');
                const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
                toast.show();

                toastElement.addEventListener('hidden.bs.toast', function () {
                    toastElement.remove();
                });
            }

            let currentMatchData = null;

            // Função para verificar se há partidas pendentes de resultado
            async function checkForPendingMatches() {
                try {
                    const response = await fetch('/Home/CheckPendingMatchResults');
                    const result = await response.json();

                    if (result.success && result.match) {
                        currentMatchData = result.match;
                        showMatchResultModal(result.match);
                    }
                } catch (error) {
                    console.error('Erro ao verificar partidas pendentes:', error);
                }
            }

            // Mostrar modal com dados da partida
            function showMatchResultModal(matchData) {
                // Preencher dados da partida
                document.getElementById('matchDateTime').textContent = matchData.dataHora;
                document.getElementById('matchCourt').textContent = matchData.quadra;
                document.getElementById('matchDuration').textContent = `${matchData.duracao} hora(s)`;
                document.getElementById('myTeamName').textContent = matchData.meuTime.nome;
                document.getElementById('opponentTeamName').textContent = matchData.timeAdversario.nome;

                // Verificar se o outro time já informou resultado
                if (matchData.outroTimeInformou) {
                    showOtherTeamResult(matchData.resultadoOutroTime, matchData.timeAdversario.nome);
                } else {
                    hideOtherTeamResult();
                }

            // Atualizar preview do resultado
            function updateResultPreview() {
                const myGoals = parseInt(document.getElementById('myGoals').value) || 0;
                const opponentGoals = parseInt(document.getElementById('opponentGoals').value) || 0;

                const resultPreview = document.getElementById('resultPreview');
                const resultText = document.getElementById('resultText');

                let result = '';
                let alertClass = 'alert-info';
                let icon = 'fas fa-info-circle';

                if (myGoals > opponentGoals) {
                    result = `${myGoals} × ${opponentGoals} - Vitória!`;
                    alertClass = 'alert-success';
                    icon = 'fas fa-trophy';
                } else if (myGoals < opponentGoals) {
                    result = `${myGoals} × ${opponentGoals} - Derrota`;
                    alertClass = 'alert-danger';
                    icon = 'fas fa-times-circle';
                } else {
                    result = `${myGoals} × ${opponentGoals} - Empate`;
                    alertClass = 'alert-warning';
                    icon = 'fas fa-handshake';
                }

                resultText.innerHTML = result;
                resultPreview.className = `alert ${alertClass} text-center`;
                resultPreview.querySelector('i').className = `${icon} me-2`;
                resultPreview.style.display = 'block';
            }

            // Incrementar gols
            function incrementGoals(inputId) {
                const input = document.getElementById(inputId);
                const currentValue = parseInt(input.value) || 0;
                if (currentValue < 50) {
                    input.value = currentValue + 1;
                    updateResultPreview();
                }
            }

            // Decrementar gols
            function decrementGoals(inputId) {
                const input = document.getElementById(inputId);
                const currentValue = parseInt(input.value) || 0;
                if (currentValue > 0) {
                    input.value = currentValue - 1;
                    updateResultPreview();
                }
            }

            // Submeter resultado
            async function submitMatchResult() {
                if (!currentMatchData) {
                    showError('Dados da partida não encontrados');
                    return;
                }

                const myGoals = parseInt(document.getElementById('myGoals').value);
                const opponentGoals = parseInt(document.getElementById('opponentGoals').value);

                // Validação
                if (isNaN(myGoals) || isNaN(opponentGoals) || myGoals < 0 || opponentGoals < 0) {
                    showError('Por favor, informe números válidos de gols');
                    return;
                }

                if (myGoals > 50 || opponentGoals > 50) {
                    showError('Número máximo de gols é 50');
                    return;
                }

                // Mostrar loading
                const submitBtn = document.querySelector('[onclick="submitMatchResult()"]');
                const spinner = document.getElementById('submitSpinner');
                const originalText = submitBtn.innerHTML;

                submitBtn.disabled = true;
                spinner.classList.remove('d-none');

                try {
                    const response = await fetch('/Home/SubmitMatchResult', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `reservationId=${currentMatchData.id}&myGoals=${myGoals}&opponentGoals=${opponentGoals}`
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Mostrar feedback de sucesso
                        showSuccessToast(result.message, result.result);

                        // Fechar modal principal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('matchResultModal'));
                        modal.hide();

                        // Resetar dados
                        currentMatchData = null;

                        // Recarregar notificações
                        if (typeof loadNotifications === 'function') {
                            setTimeout(loadNotifications, 1000);
                        }
                    } else {
                        showError(result.message);
                    }
                } catch (error) {
                    console.error('Erro ao enviar resultado:', error);
                    showError('Erro de conexão. Tente novamente.');
                } finally {
                    // Restaurar botão
                    submitBtn.disabled = false;
                    spinner.classList.add('d-none');
                    submitBtn.innerHTML = originalText;
                }
            }

            // Pular por agora (fechar modal)
            function skipMatchResult() {
                const modal = bootstrap.Modal.getInstance(document.getElementById('matchResultModal'));
                modal.hide();
                currentMatchData = null;

                // Mostrar toast informativo
                showInfoToast('Você pode informar o resultado mais tarde através das suas reservas.');
            }

            // Mostrar erro na modal
            function showError(message) {
                const errorDiv = document.getElementById('errorMessage');
                const errorText = document.getElementById('errorText');

                errorText.textContent = message;
                errorDiv.classList.remove('d-none');

                // Scroll para o erro
                errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

                setTimeout(() => {
                    errorDiv.classList.add('d-none');
                }, 5000);
            }

            // Mostrar toast de sucesso
            function showSuccessToast(message, resultData) {
                const toastHtml = `
                        <div class="toast align-items-center text-white bg-success border-0 position-fixed"
                             style="top: 80px; right: 20px; z-index: 1060; min-width: 350px;">
                            <div class="d-flex">
                                <div class="toast-body">
                                    <i class="fas fa-check-circle me-2"></i>
                                    <strong>Resultado Salvo!</strong><br>
                                    <small>${message}</small>
                                </div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                        data-bs-dismiss="toast"></button>
                            </div>
                        </div>
                    `;

                document.body.insertAdjacentHTML('beforeend', toastHtml);

                const toastElement = document.querySelector('.toast:last-child');
                const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
                toast.show();

                toastElement.addEventListener('hidden.bs.toast', function () {
                    toastElement.remove();
                });
            }

            // Mostrar toast informativo
            function showInfoToast(message) {
                const toastHtml = `
                        <div class="toast align-items-center text-white bg-info border-0 position-fixed"
                             style="top: 80px; right: 20px; z-index: 1060; min-width: 350px;">
                            <div class="d-flex">
                                <div class="toast-body">
                                    <i class="fas fa-info-circle me-2"></i>
                                    ${message}
                                </div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                        data-bs-dismiss="toast"></button>
                            </div>
                        </div>
                    `;

                document.body.insertAdjacentHTML('beforeend', toastHtml);

                const toastElement = document.querySelector('.toast:last-child');
                const toast = new bootstrap.Toast(toastElement, { delay: 4000 });
                toast.show();

                toastElement.addEventListener('hidden.bs.toast', function () {
                    toastElement.remove();
                });
            }

            // Adicionar handler para teclas (Enter para salvar, Esc para fechar)
            document.addEventListener('keydown', function (e) {
                if (document.getElementById('matchResultModal').classList.contains('show')) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        submitMatchResult();
                    } else if (e.key === 'Escape') {
                        e.preventDefault();
                        skipMatchResult();
                    }
                }
            });

            // Verificar partidas pendentes quando a página carregar (apenas se autenticado)
            document.addEventListener('DOMContentLoaded', function () {
                // Só executar se usuário estiver autenticado (verificar se existe elemento que só aparece logado)
                if (document.getElementById('notificationsDropdown')) {
                    // Aguardar um pouco para garantir que a página carregou completamente e outras verificações terminaram
                    setTimeout(checkForPendingMatches, 3000);
                }
            });

            // Verificar periodicamente por novas partidas que precisam de resultado (a cada 5 minutos)
            if (typeof window !== 'undefined' && document.getElementById('notificationsDropdown')) {
                setInterval(checkForPendingMatches, 300000); // 5 minutos
            }
        </script>
    }

    @await RenderSectionAsync("Scripts", required: false)

    <style>
        .navbar-nav .nav-link:hover {
            color: #fff !important;
        }

        .dropdown-menu {
            border: none;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .dropdown-item:hover {
            background-color: #f8f9fa;
        }

        /* Responsividade para mobile */
        @@media (max-width: 768px) {
            .navbar-nav .dropdown-menu {
                position: static !important;
                float: none !important;
                width: 100% !important;
                margin-top: 0 !important;
                background-color: transparent !important;
                border: 0 !important;
                box-shadow: none !important;
            }

            .navbar-nav .dropdown-item {
                color: #fff !important;
                padding: 0.5rem 1rem !important;
            }

                .navbar-nav .dropdown-item:hover {
                    background-color: rgba(255, 255, 255, 0.1) !important;
                }
        }

        /* Estilos para o sistema de notificações na navbar */
        .notification-dropdown {
            position: relative;
        }

        .notification-menu {
            width: 380px;
            max-height: 500px;
            border: none;
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
            border-radius: 10px;
            overflow: hidden;
        }

        .notification-header {
            border-radius: 10px 10px 0 0;
        }

        .notification-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .notification-item {
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

            .notification-item:hover {
                background-color: #f8f9fa;
            }

            .notification-item.unread {
                background-color: #f8f9ff;
                border-left: 3px solid #0d6efd;
            }

                .notification-item.unread:hover {
                    background-color: #e7f1ff;
                }

        .notification-indicator {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            width: 8px;
            height: 8px;
            background-color: #dc3545;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .icon-wrapper {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
        }

        .notification-actions .btn {
            font-size: 0.7rem;
            padding: 0.2rem 0.4rem;
        }

        /* Badge animado */
        #notification-badge {
            font-size: 0.65rem;
            min-width: 1.2rem;
            height: 1.2rem;
            animation: pulse-badge 2s infinite;
        }

        @@keyframes pulse-badge {
            0% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.4);
            }

            70% {
                box-shadow: 0 0 0 8px rgba(220, 53, 69, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }

        /* Botão com notificações */
        #notificationsDropdown.has-notifications {
            animation: bell-shake 3s infinite;
        }

        @@keyframes bell-shake {
            0%, 50%, 100% {
                transform: rotate(0deg);
            }

            10%, 30% {
                transform: rotate(-10deg);
            }

            20%, 40% {
                transform: rotate(10deg);
            }
        }

        /* Scrollbar customizada */
        .notification-list::-webkit-scrollbar {
            width: 6px;
        }

        .notification-list::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .notification-list::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

            .notification-list::-webkit-scrollbar-thumb:hover {
                background: #a8a8a8;
            }

        /* Responsividade para notificações */
        @@media (max-width: 768px) {
            .notification-menu {
                width: 90vw;
                max-width: 350px;
            }
        }

        /* Estilo para o botão de notificações */
        .btn-link.nav-link {
            text-decoration: none;
        }

            .btn-link.nav-link:hover {
                color: #fff !important;
                background-color: rgba(255, 255, 255, 0.1);
                border-radius: 0.25rem;
            }

        /* Animação de pulso para indicadores */
        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.4);
            }

            70% {
                box-shadow: 0 0 0 6px rgba(220, 53, 69, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }

        .match-info-card {
            border-left: 4px solid #0d6efd;
        }

        .team-card {
            transition: transform 0.2s ease;
        }

            .team-card:hover {
                transform: translateY(-2px);
            }

        .goal-input {
            transition: all 0.3s ease;
        }

            .goal-input:focus {
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
                transform: scale(1.05);
            }

        .goal-controls {
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }

        .goal-input-container:hover .goal-controls {
            opacity: 1;
        }

        .vs-container {
            position: relative;
            animation: pulse-vs 2s infinite;
        }

        @@keyframes pulse-vs {
            0%, 100% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
            }
        }

        .modal-icon {
            animation: trophy-glow 3s infinite alternate;
        }

        @@keyframes trophy-glow {
            from {
                filter: drop-shadow(0 0 5px rgba(255, 215, 0, 0.5));
            }

            to {
                filter: drop-shadow(0 0 15px rgba(255, 215, 0, 0.8));
            }
        }

        .result-preview {
            animation: slideInUp 0.5s ease;
        }

        @@keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Efeitos visuais para vitória/derrota */
        .victory-effect {
            background: linear-gradient(135deg, #28a745, #20c997) !important;
        }

        .defeat-effect {
            background: linear-gradient(135deg, #dc3545, #fd7e14) !important;
        }

        .draw-effect {
            background: linear-gradient(135deg, #6c757d, #adb5bd) !important;
        }
    </style>
</body>
</html>