<div class="dropdown notification-dropdown">
    <button class="btn btn-outline-light position-relative me-2" 
            type="button" 
            id="notificationsDropdown" 
            data-bs-toggle="dropdown" 
            aria-expanded="false"
            title="Notificações">
        <i class="fas fa-bell"></i>
        <span id="notificationBadge" 
              class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">
            0
        </span>
    </button>
    
    <div class="dropdown-menu dropdown-menu-end notification-menu p-0" 
         aria-labelledby="notificationsDropdown">
        
        <!-- Cabeçalho -->
        <div class="notification-header d-flex justify-content-between align-items-center p-3 bg-primary text-white">
            <h6 class="mb-0 fw-bold">
                <i class="fas fa-bell me-2"></i>
                Notificações
            </h6>
            <div class="d-flex gap-1">
                <button type="button" 
                        class="btn btn-sm btn-outline-light" 
                        onclick="markAllNotificationsAsRead()"
                        title="Marcar todas como lidas">
                    <i class="fas fa-check-double fa-sm"></i>
                </button>
                <a href="/Notification/Index" class="btn btn-sm btn-outline-light" title="Ver todas">
                    <i class="fas fa-list fa-sm"></i>
                </a>
            </div>
        </div>
        
        <!-- Lista de Notificações -->
        <div id="notificationsList" class="notification-list">
            <div class="notification-loading text-center py-4">
                <div class="spinner-border spinner-border-sm text-primary mb-2" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
                <p class="text-muted mb-0 small">Carregando notificações...</p>
            </div>
        </div>
        
        <!-- Rodapé -->
        <div class="notification-footer text-center py-2 bg-light border-top">
            <small class="text-muted">
                <i class="fas fa-info-circle me-1"></i>
                Últimas 10 notificações
            </small>
        </div>
    </div>
</div>

<!-- Template para notificações individuais -->
<div id="notificationTemplate" class="d-none">
    <div class="notification-item">
        <div class="notification-content">
            <div class="notification-icon"></div>
            <div class="notification-body">
                <div class="notification-title"></div>
                <div class="notification-message"></div>
                <div class="notification-time"></div>
            </div>
            <div class="notification-actions"></div>
        </div>
    </div>
</div>

<!-- Modais de Confirmação -->
<!-- Modal de Confirmação de Ação -->
<div class="modal fade" id="confirmActionModal" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="confirmActionTitle">Confirmar Ação</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmActionMessage">Tem certeza que deseja realizar esta ação?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary btn-sm" id="confirmActionButton">Confirmar</button>
            </div>
        </div>
    </div>
</div>

<script>
// Configurações globais
const NOTIFICATION_CONFIG = {
    updateInterval: 15000, // 15 segundos
    maxRetries: 3,
    endpoints: {
        get: '/Notification/GetNotifications',
        markAsRead: '/Notification/MarkAsRead',
        markAllAsRead: '/Notification/MarkAllAsRead',
        acceptChallenge: '/Notification/AcceptChallenge',
        rejectChallenge: '/Notification/RejectChallenge'
    }
};

let notificationUpdateInterval;
let retryCount = 0;
let pendingAction = null;

// Inicialização
document.addEventListener('DOMContentLoaded', function() {
    initializeNotifications();
});

function initializeNotifications() {
    loadNotifications();
    
    // Configurar atualização automática
    notificationUpdateInterval = setInterval(loadNotifications, NOTIFICATION_CONFIG.updateInterval);
    
    // Limpar interval ao sair da página
    window.addEventListener('beforeunload', function() {
        if (notificationUpdateInterval) {
            clearInterval(notificationUpdateInterval);
        }
    });
}

// Carregar notificações
async function loadNotifications() {
    try {
        const response = await fetch(NOTIFICATION_CONFIG.endpoints.get);
        const result = await response.json();
        
        if (result.success) {
            updateNotificationBadge(result.unreadCount);
            renderNotifications(result.notifications);
            retryCount = 0; // Reset contador de retry em caso de sucesso
        } else {
            handleNotificationError('Erro ao carregar notificações: ' + result.message);
        }
    } catch (error) {
        console.error('Erro na requisição de notificações:', error);
        handleNotificationError('Erro de conexão');
    }
}

function handleNotificationError(message) {
    retryCount++;
    
    if (retryCount <= NOTIFICATION_CONFIG.maxRetries) {
        console.log(`Tentativa ${retryCount} de ${NOTIFICATION_CONFIG.maxRetries}`);
        setTimeout(loadNotifications, 5000); // Retry em 5 segundos
        return;
    }
    
    document.getElementById('notificationsList').innerHTML = `
        <div class="notification-error text-center py-4">
            <i class="fas fa-exclamation-triangle text-warning fa-2x mb-2"></i>
            <p class="text-muted mb-2">${message}</p>
            <button class="btn btn-sm btn-outline-primary" onclick="loadNotifications()">
                <i class="fas fa-retry me-1"></i>Tentar Novamente
            </button>
        </div>
    `;
}

// Atualizar badge de notificações
function updateNotificationBadge(count) {
    const badge = document.getElementById('notificationBadge');
    const dropdown = document.getElementById('notificationsDropdown');
    
    if (count > 0) {
        badge.textContent = count > 99 ? '99+' : count;
        badge.classList.remove('d-none');
        dropdown.classList.add('has-notifications');
    } else {
        badge.classList.add('d-none');
        dropdown.classList.remove('has-notifications');
    }
}

// Renderizar lista de notificações
function renderNotifications(notifications) {
    const container = document.getElementById('notificationsList');
    
    if (notifications.length === 0) {
        container.innerHTML = `
            <div class="notification-empty text-center py-5">
                <i class="fas fa-bell-slash text-muted fa-3x mb-3"></i>
                <h6 class="text-muted">Nenhuma notificação</h6>
                <p class="text-muted small mb-0">Você está em dia com tudo!</p>
            </div>
        `;
        return;
    }
    
    const notificationsHtml = notifications.map(notification => 
        createNotificationItem(notification)
    ).join('');
    
    container.innerHTML = notificationsHtml;
}

// Criar item individual de notificação
function createNotificationItem(notification) {
    const isUnread = !notification.lida;
    const typeClass = getNotificationTypeClass(notification.tipo);
    const icon = getNotificationIcon(notification.tipo);
    
    let actionsHtml = '';
    if (notification.permiteAcao && notification.tipo === 'DesafioRecebido') {
        actionsHtml = `
            <div class="notification-challenge-actions mt-2">
                <button class="btn btn-success btn-sm me-1" 
                        onclick="handleChallengeAction(${notification.id}, 'accept', '${notification.acaoPositiva}')">
                    <i class="fas fa-check fa-sm me-1"></i>${notification.acaoPositiva}
                </button>
                <button class="btn btn-danger btn-sm" 
                        onclick="handleChallengeAction(${notification.id}, 'reject', '${notification.acaoNegativa}')">
                    <i class="fas fa-times fa-sm me-1"></i>${notification.acaoNegativa}
                </button>
            </div>
        `;
    }
    
    return `
        <div class="notification-item ${isUnread ? 'unread' : ''} ${typeClass}" 
             data-notification-id="${notification.id}"
             onclick="markNotificationAsRead(${notification.id})">
            
            <div class="notification-content d-flex p-3">
                <div class="notification-icon me-3">
                    ${icon}
                </div>
                
                <div class="notification-body flex-grow-1">
                    <div class="notification-title fw-bold ${isUnread ? 'text-primary' : ''} mb-1">
                        ${notification.titulo}
                        ${isUnread ? '<span class="badge bg-primary ms-2 badge-sm">Nova</span>' : ''}
                    </div>
                    
                    <div class="notification-message text-muted small mb-2">
                        ${notification.mensagem}
                    </div>
                    
                    <div class="notification-time text-muted" style="font-size: 0.75rem;">
                        <i class="fas fa-clock me-1"></i>${notification.dataCriacao}
                    </div>
                    
                    ${actionsHtml}
                </div>
                
                ${isUnread ? '<div class="notification-indicator"></div>' : ''}
            </div>
        </div>
    `;
}

// Obter classe CSS baseada no tipo de notificação
function getNotificationTypeClass(tipo) {
    const classes = {
        'DesafioEnviado': 'notification-sent',
        'DesafioRecebido': 'notification-received',
        'DesafioAceito': 'notification-accepted',
        'PartidaConfirmada': 'notification-confirmed',
        'DesafioRejeitado': 'notification-rejected',
        'ResultadoPartida': 'notification-result',
        'LembretePartida': 'notification-reminder'
    };
    
    return classes[tipo] || 'notification-default';
}

// Obter ícone baseado no tipo de notificação
function getNotificationIcon(tipo) {
    const icons = {
        'DesafioEnviado': '<div class="icon-wrapper bg-warning"><i class="fas fa-paper-plane text-white"></i></div>',
        'DesafioRecebido': '<div class="icon-wrapper bg-info"><i class="fas fa-handshake text-white"></i></div>',
        'DesafioAceito': '<div class="icon-wrapper bg-success"><i class="fas fa-check text-white"></i></div>',
        'PartidaConfirmada': '<div class="icon-wrapper bg-primary"><i class="fas fa-calendar-check text-white"></i></div>',
        'DesafioRejeitado': '<div class="icon-wrapper bg-danger"><i class="fas fa-times text-white"></i></div>',
        'ResultadoPartida': '<div class="icon-wrapper bg-dark"><i class="fas fa-trophy text-white"></i></div>',
        'LembretePartida': '<div class="icon-wrapper bg-secondary"><i class="fas fa-bell text-white"></i></div>'
    };
    
    return icons[tipo] || '<div class="icon-wrapper bg-secondary"><i class="fas fa-bell text-white"></i></div>';
}

// Marcar notificação como lida
async function markNotificationAsRead(notificationId) {
    try {
        const response = await fetch(NOTIFICATION_CONFIG.endpoints.markAsRead, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `notificationId=${notificationId}`
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Atualizar visualmente a notificação
            const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
            if (notificationElement) {
                notificationElement.classList.remove('unread');
                
                // Remover badge "Nova"
                const badge = notificationElement.querySelector('.badge');
                if (badge) {
                    badge.remove();
                }
                
                // Remover indicador visual
                const indicator = notificationElement.querySelector('.notification-indicator');
                if (indicator) {
                    indicator.remove();
                }
                
                // Remover classe text-primary do título
                const title = notificationElement.querySelector('.notification-title');
                if (title) {
                    title.classList.remove('text-primary');
                }
            }
            
            // Recarregar para atualizar contador
            setTimeout(loadNotifications, 500);
        }
    } catch (error) {
        console.error('Erro ao marcar notificação como lida:', error);
    }
}

// Marcar todas as notificações como lidas
async function markAllNotificationsAsRead() {
    try {
        const response = await fetch(NOTIFICATION_CONFIG.endpoints.markAllAsRead, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            loadNotifications();
            showToast('Todas as notificações foram marcadas como lidas', 'success');
        }
    } catch (error) {
        console.error('Erro ao marcar todas as notificações como lidas:', error);
        showToast('Erro ao marcar notificações', 'error');
    }
}

// Lidar com ações de desafio (aceitar/rejeitar)
function handleChallengeAction(notificationId, action, actionText) {
    pendingAction = { notificationId, action, actionText };
    
    const modal = new bootstrap.Modal(document.getElementById('confirmActionModal'));
    
    const title = action === 'accept' ? 'Aceitar Desafio' : 'Rejeitar Desafio';
    const message = action === 'accept' ? 
        'Tem certeza que deseja aceitar este desafio? A partida será confirmada automaticamente.' :
        'Tem certeza que deseja rejeitar este desafio? O time será notificado.';
    
    document.getElementById('confirmActionTitle').textContent = title;
    document.getElementById('confirmActionMessage').textContent = message;
    
    const confirmBtn = document.getElementById('confirmActionButton');
    confirmBtn.textContent = actionText;
    confirmBtn.className = `btn btn-sm ${action === 'accept' ? 'btn-success' : 'btn-danger'}`;
    
    modal.show();
}

// Confirmar ação do modal
document.getElementById('confirmActionButton').addEventListener('click', async function() {
    if (!pendingAction) return;
    
    const { notificationId, action } = pendingAction;
    const endpoint = action === 'accept' ? 
        NOTIFICATION_CONFIG.endpoints.acceptChallenge : 
        NOTIFICATION_CONFIG.endpoints.rejectChallenge;
    
    try {
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `notificationId=${notificationId}`
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast(result.message, 'success');
            loadNotifications();
            
            // Fechar modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('confirmActionModal'));
            modal.hide();
        } else {
            showToast(result.message, 'error');
        }
    } catch (error) {
        console.error('Erro na ação de desafio:', error);
        showToast('Erro ao processar ação', 'error');
    }
    
    pendingAction = null;
});

// Mostrar toast de feedback
function showToast(message, type = 'info') {
    // Remover toast existente se houver
    const existingToast = document.getElementById('notificationToast');
    if (existingToast) {
        existingToast.remove();
    }
    
    const toastClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-info';
    
    const toastHtml = `
        <div class="toast align-items-center text-white ${toastClass} border-0 position-fixed" 
             id="notificationToast" 
             role="alert" 
             style="top: 20px; right: 20px; z-index: 1055;">
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                        data-bs-dismiss="toast"></button>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', toastHtml);
    
    const toastElement = document.getElementById('notificationToast');
    const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
    toast.show();
    
    // Remover do DOM após esconder
    toastElement.addEventListener('hidden.bs.toast', function() {
        toastElement.remove();
    });
}
</script>

<style>
/* Estilos para o sistema de notificações */
.notification-dropdown {
    position: relative;
}

.notification-menu {
    width: 400px;
    max-height: 600px;
    border: none;
    box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    border-radius: 10px;
    overflow: hidden;
}

.notification-header {
    border-radius: 10px 10px 0 0;
}

.notification-list {
    max-height: 450px;
    overflow-y: auto;
}

.notification-item {
    border-bottom: 1px solid #eee;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
}

.notification-item:hover {
    background-color: #f8f9fa;
}

.notification-item.unread {
    background-color: #f8f9ff;
    border-left: 3px solid #0d6efd;
}

.notification-item.unread:hover {
    background-color: #e7f1ff;
}

.notification-indicator {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    width: 8px;
    height: 8px;
    background-color: #dc3545;
    border-radius: 50%;
    animation: pulse 2s infinite;
}

.icon-wrapper {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.9rem;
}

.notification-challenge-actions {
    margin-top: 8px;
}

.notification-challenge-actions .btn {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
}

/* Badge animado */
#notificationBadge {
    font-size: 0.65rem;
    min-width: 1.2rem;
    height: 1.2rem;
    animation: pulse-badge 2s infinite;
}

.pulse-badge {
    0% {
        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.4);
    }
    70% {
        box-shadow: 0 0 0 8px rgba(220, 53, 69, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
    }
}

/* Botão com notificações */
#notificationsDropdown.has-notifications {
    animation: bell-shake 3s infinite;
}

.bell-shake {
    0%, 50%, 100% {
        transform: rotate(0deg);
    }
    10%, 30% {
        transform: rotate(-10deg);
    }
    20%, 40% {
        transform: rotate(10deg);
    }
}

/* Estados especiais */
.notification-empty {
    padding: 3rem 2rem;
}

.notification-error {
    padding: 2rem;
}

.notification-loading {
    padding: 2rem;
}

/* Tipos de notificação */
.notification-sent {
    border-left-color: #ffc107 !important;
}

.notification-received {
    border-left-color: #17a2b8 !important;
}

.notification-accepted {
    border-left-color: #28a745 !important;
}

.notification-confirmed {
    border-left-color: #007bff !important;
}

.notification-rejected {
    border-left-color: #dc3545 !important;
}

.notification-result {
    border-left-color: #6c757d !important;
}

.notification-reminder {
    border-left-color: #fd7e14 !important;
}

/* Scrollbar customizada */
.notification-list::-webkit-scrollbar {
    width: 6px;
}

.notification-list::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.notification-list::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.notification-list::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Responsividade */
@@media only screen (max-width: 768px) {
    .notification-menu {
        width: 90vw;
        max-width: 350px;
    }
}
</style>