@using FutMatchApp.Models.Enums
@model FutMatchApp.Models.ViewModels.GoogleCourtDetailsViewModel
@{
    ViewData["Title"] = $"Detalhes - {Model.Court.Nome}";
}

<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index">Início</a></li>
        <li class="breadcrumb-item active">@Model.Court.Nome</li>
    </ol>
</nav>

<!-- Header da Quadra -->
<div class="card mb-4 shadow-sm">
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <div class="d-flex align-items-start mb-3">
                    <div class="me-3">
                        <i class="fas fa-futbol fa-3x text-primary"></i>
                    </div>
                    <div class="flex-grow-1">
                        <h2 class="fw-bold mb-2">
                            @Model.Court.Nome
                            <span class="badge bg-success ms-2">
                                <i class="fab fa-google me-1"></i>Google Places
                            </span>
                        </h2>

                        @if (Model.Court.GoogleRating.HasValue)
                        {
                            <div class="mb-2">
                                <span class="text-warning fs-5">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Math.Floor(Model.Court.GoogleRating.Value))
                                        {
                                            <i class="fas fa-star"></i>
                                        }
                                        else if (i <= Model.Court.GoogleRating.Value)
                                        {
                                            <i class="fas fa-star-half-alt"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star"></i>
                                        }
                                    }
                                </span>
                                <span class="ms-2 text-muted">@Model.Court.GoogleRating.Value.ToString("F1") • Avaliação Google</span>
                            </div>
                        }

                        <p class="text-muted mb-2">
                            <i class="fas fa-map-marker-alt me-2"></i>
                            @Model.Court.Localizacao
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-4 text-end">
                <div class="bg-light rounded p-3 mb-3">
                    <h4 class="text-success fw-bold mb-1">R$ @Model.Court.PrecoPorHora.ToString("F2")</h4>
                    <small class="text-muted">por hora</small>
                </div>

                <a href="https://www.google.com/maps/place/?q=place_id:@Model.Court.GooglePlaceId"
                   target="_blank"
                   class="btn btn-outline-primary">
                    <i class="fas fa-map-marker-alt me-2"></i>Ver no Google Maps
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Info do Time + Estatísticas -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="alert alert-info d-flex align-items-center">
            <i class="fas fa-users fa-2x me-3"></i>
            <div class="flex-grow-1">
                <h6 class="fw-bold mb-1">Time Selecionado: @Model.UserTeam.Nome</h6>
                <small>As reservas serão feitas para este time</small>
            </div>
            <a href="@Url.Action("Index", "Profile")" class="btn btn-outline-info btn-sm">
                <i class="fas fa-edit me-1"></i>Trocar
            </a>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h6 class="fw-bold mb-2">Atividade da Quadra</h6>
                <div class="row">
                    <div class="col-6">
                        <div class="fw-bold text-primary">@Model.AllReservations.Count(r => r.Status == StatusReservation.Pendente)</div>
                        <small class="text-muted">Aguardando</small>
                    </div>
                    <div class="col-6">
                        <div class="fw-bold text-success">@Model.AllReservations.Count(r => r.Status == StatusReservation.Confirmada)</div>
                        <small class="text-muted">Confirmadas</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Jogos Marcados -->
@if (Model.AllReservations.Any())
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">
                <i class="fas fa-calendar-check me-2"></i>
                Jogos Marcados nesta Quadra
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                @foreach (var reservation in Model.AllReservations.OrderBy(r => r.DataHora))
                {
                    <div class="col-md-6 mb-3">
                        <div class="card border-@(reservation.Status == StatusReservation.Confirmada ? "success" : "warning")">
                            <div class="card-body p-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h6 class="fw-bold mb-0">
                                        @reservation.DataHora.ToString("dd/MM HH:mm")
                                    </h6>
                                    <span class="badge bg-@(reservation.Status == StatusReservation.Confirmada ? "success" : "warning")">
                                        @(reservation.Status == StatusReservation.Confirmada ? "Confirmada" : "Aguardando Desafio")
                                    </span>
                                </div>

                                <!-- Time 1 (Criador) -->
                                <div class="d-flex align-items-center mb-2">
                                    <div class="me-2" style="width: 30px; height: 30px;"
                                         data-team-id="@reservation.Team.Id"
                                         data-team-name="@reservation.Team.Nome">
                                        @if (!string.IsNullOrEmpty(reservation.Team.FotoUrl))
                                        {
                                            <img src="@reservation.Team.FotoUrl"
                                                 alt="@reservation.Team.Nome"
                                                 class="rounded-circle team-clickable"
                                                 style="width: 100%; height: 100%; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center team-clickable"
                                                 style="width: 100%; height: 100%;">
                                                <i class="fas fa-users fa-sm"></i>
                                            </div>
                                        }
                                    </div>
                                    <div>
                                        <div class="fw-bold">@reservation.Team.Nome</div>
                                        <small class="text-muted">@reservation.User.Nome</small>
                                    </div>
                                </div>

                                <!-- VS -->
                                <div class="text-center mb-2">
                                    <span class="badge bg-dark">VS</span>
                                </div>

                                <!-- Time 2 (Oponente ou Vazio) -->
                                @if (reservation.OpponentTeam != null)
                                {
                                    <div class="d-flex align-items-center mb-2">
                                        <div class="me-2" style="width: 30px; height: 30px;"
                                             data-team-id="@reservation.OpponentTeam.Id"
                                             data-team-name="@reservation.OpponentTeam.Nome">
                                            @if (!string.IsNullOrEmpty(reservation.OpponentTeam.FotoUrl))
                                            {
                                                <img src="@reservation.OpponentTeam.FotoUrl"
                                                     alt="@reservation.OpponentTeam.Nome"
                                                     class="rounded-circle team-clickable"
                                                     style="width: 100%; height: 100%; object-fit: cover;">
                                            }
                                            else
                                            {
                                                <div class="bg-success text-white rounded-circle d-flex align-items-center justify-content-center team-clickable"
                                                     style="width: 100%; height: 100%;">
                                                    <i class="fas fa-users fa-sm"></i>
                                                </div>
                                            }
                                        </div>
                                        <div>
                                            <div class="fw-bold">@reservation.OpponentTeam.Nome</div>
                                            <small class="text-muted">@reservation.OpponentUser.Nome</small>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center mb-2">
                                        <div class="bg-light border rounded-circle me-2 d-flex align-items-center justify-content-center"
                                             style="width: 30px; height: 30px;">
                                            <i class="fas fa-question text-muted fa-sm"></i>
                                        </div>
                                        <div class="text-muted">
                                            <div class="fw-bold">Aguardando oponente</div>
                                            <small>Desafie este time!</small>
                                        </div>
                                    </div>
                                    @if (reservation.UserId != Model.CurrentUserId)
                                    {
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-success btn-sm w-100"
                                                    onclick="showChallengeModal(@reservation.Id, '@reservation.Team.Nome', '@reservation.DataHora.ToString("dd/MM HH:mm")')">
                                                <i class="fas fa-handshake me-1"></i>Enviar Desafio
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="mt-2">
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle me-1"></i>Seu horário - aguardando desafio
                                            </small>
                                        </div>
                                    }
                                }

                                <!-- Duração e Observações -->
                                <div class="mt-2 pt-2 border-top">
                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>
                                        @reservation.DuracaoHoras @(reservation.DuracaoHoras == 1 ? "hora" : "horas")

                                        @if (!string.IsNullOrEmpty(reservation.Observacoes))
                                        {
                                            <br>

                                            <i class="fas fa-comment me-1"></i>

                                            @reservation.Observacoes
                                        }
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<!-- Calendário de Horários -->
<div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">
            <i class="fas fa-calendar-alt me-2"></i>
            Horários Disponíveis - Próximos 7 dias
        </h5>
    </div>
    <div class="card-body">
        <div class="alert alert-light">
            <h6 class="fw-bold mb-2">
                <i class="fas fa-info-circle me-2 text-info"></i>Como funciona:
            </h6>
            <ul class="mb-0">
                <li><strong>Agendar Horário:</strong> Seja o primeiro time a reservar um horário vazio</li>
                <li><strong>Enviar Desafio:</strong> Desafie um time que já agendou um horário</li>
                <li><strong>Jogo Confirmado:</strong> Após o desafio, o jogo fica confirmado e travado</li>
            </ul>
        </div>

        @foreach (var date in Model.AvailableDates)
        {
            <div class="mb-4">
                <h6 class="border-bottom pb-2 fw-bold">
                    <i class="fas fa-calendar me-2 text-primary"></i>
                    @date.ToString("dddd, dd/MM/yyyy", new System.Globalization.CultureInfo("pt-BR"))
                    @if (date.Date == DateTime.Today)
                    {
                        <span class="badge bg-warning text-dark ms-2">Hoje</span>
                    }
                    else if (date.Date == DateTime.Today.AddDays(1))
                    {
                        <span class="badge bg-info ms-2">Amanhã</span>
                    }
                </h6>

                <div class="row g-2">
                    @foreach (var time in Model.TimeSlots)
                    {
                        var dateTime = date.Add(TimeSpan.Parse(time));
                        var isPast = dateTime <= DateTime.Now;
                        var reservations = Model.GetReservationsForDateTime(date, time);
                        var canChallenge = Model.CanUserChallenge(date, time);
                        var isAvailable = Model.IsSlotAvailable(date, time);
                        var isEmpty = Model.IsSlotEmpty(date, time);
                        var isConfirmed = Model.IsSlotConfirmed(date, time);

                        <div class="col-lg-2 col-md-3 col-sm-4 col-6">
                            @if (isPast)
                            {
                                <button class="btn btn-outline-secondary btn-sm w-100" disabled>
                                    <div class="fw-bold">@time</div>
                                    <small>Passou</small>
                                </button>
                            }
                            else if (isConfirmed)
                            {
                                <!-- Horário confirmado - cinza e travado -->
                                <button class="btn btn-secondary btn-sm w-100" disabled style="opacity: 0.7;">
                                    <div class="fw-bold">@time</div>
                                    <small><i class="fas fa-lock"></i> Confirmado</small>
                                </button>
                            }
                            else if (reservations.Count >= 2)
                            {
                                <button class="btn btn-danger btn-sm w-100" disabled>
                                    <div class="fw-bold">@time</div>
                                    <small>Ocupado</small>
                                </button>
                            }
                            else if (canChallenge)
                            {
                                <!-- Existe reserva pendente - mostrar botão de desafio -->
                                <button type="button"
                                        class="btn btn-warning btn-sm w-100 challenge-btn"
                                        onclick="showChallengeModal(@reservations.First().Id, '@reservations.First().Team.Nome', '@time', '@date.ToString("dd/MM")')">
                                    <div class="fw-bold">@time</div>
                                    <small><i class="fas fa-handshake"></i> Enviar Desafio</small>
                                </button>
                            }
                            else if (reservations.Any() && reservations.First().UserId == Model.CurrentUserId)
                            {
                                <!-- Usuário já agendou este horário -->
                                <button class="btn btn-info btn-sm w-100" disabled>
                                    <div class="fw-bold">@time</div>
                                    <small><i class="fas fa-clock"></i> Agendado</small>
                                </button>
                            }
                            else if (isEmpty && isAvailable)
                            {
                                <!-- Horário vazio - mostrar botão de agendar -->
                                <button type="button"
                                        class="btn btn-outline-success btn-sm w-100 schedule-btn"
                                        onclick="showScheduleModal('@dateTime.ToString("yyyy-MM-ddTHH:mm:ss")', '@time', '@date.ToString("dd/MM")')">
                                    <div class="fw-bold">@time</div>
                                    <small><i class="fas fa-plus"></i> Agendar Horário</small>
                                </button>
                            }
                            else
                            {
                                <!-- Fallback para casos não cobertos -->
                                <button class="btn btn-outline-secondary btn-sm w-100" disabled>
                                    <div class="fw-bold">@time</div>
                                    <small>Indisponível</small>
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Botões de Ação -->
<div class="d-flex justify-content-between mt-4">
    <a class="btn btn-secondary" asp-action="Index">
        <i class="fas fa-arrow-left me-2"></i>Voltar para Busca
    </a>

    <button class="btn btn-primary" onclick="document.querySelector('.schedule-btn, .challenge-btn')?.scrollIntoView({behavior: 'smooth'})">
        <i class="fas fa-calendar-plus me-2"></i>Escolher Horário
    </button>
</div>

<!-- Modal de Agendamento (1º Time) -->
<div class="modal fade" id="scheduleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-calendar-plus me-2"></i>Agendar Horário
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-success">
                    <h6 class="fw-bold">
                        <i class="fas fa-info-circle me-2"></i>Você será o 1º time
                    </h6>
                    <p class="mb-0">
                        Ao agendar este horário, você estará criando uma oportunidade para outros times
                        enviarem desafios. O jogo será confirmado quando um oponente aceitar seu desafio.
                    </p>
                </div>

                <div class="card border-success">
                    <div class="card-body">
                        <h6 class="fw-bold">Detalhes do Agendamento:</h6>
                        <p class="mb-1"><strong>Quadra:</strong> @Model.Court.Nome</p>
                        <p class="mb-1"><strong>Seu Time:</strong> @Model.UserTeam.Nome</p>
                        <p class="mb-1"><strong>Data e Hora:</strong> <span id="scheduleDateTime"></span></p>
                        <p class="mb-0"><strong>Preço:</strong> R$ @Model.Court.PrecoPorHora.ToString("F2")/hora</p>
                    </div>
                </div>

                <form id="scheduleForm">
                    <input type="hidden" name="googlePlaceId" value="@Model.Court.GooglePlaceId" />
                    <input type="hidden" name="courtName" value="@Model.Court.Nome" />
                    <input type="hidden" name="courtLocation" value="@Model.Court.Localizacao" />
                    <input type="hidden" name="dataHora" id="scheduleDataHora" />

                    <div class="mb-3 mt-3">
                        <label class="form-label fw-semibold">Duração</label>
                        <select name="duracaoHoras" class="form-select">
                            <option value="1">1 hora - R$ @Model.Court.PrecoPorHora.ToString("F2")</option>
                            <option value="2">2 horas - R$ @((Model.Court.PrecoPorHora * 2).ToString("F2"))</option>
                            <option value="3">3 horas - R$ @((Model.Court.PrecoPorHora * 3).ToString("F2"))</option>
                            <option value="4">4 horas - R$ @((Model.Court.PrecoPorHora * 4).ToString("F2"))</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">Observações</label>
                        <textarea name="observacoes" class="form-control" rows="2"
                                  placeholder="Informações sobre o tipo de jogo, nível dos jogadores..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-success" onclick="submitSchedule()">
                    <i class="fas fa-calendar-plus me-1"></i>Confirmar Agendamento
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Desafio (2º Time) -->
<div class="modal fade" id="challengeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-handshake me-2"></i>Enviar Desafio
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <h6 class="fw-bold">
                        <i class="fas fa-bolt me-2"></i>Você será o 2º time (Desafiante)
                    </h6>
                    <p class="mb-0">
                        Ao enviar este desafio, o jogo será <strong>confirmado automaticamente</strong>
                        e ambos os times serão notificados.
                    </p>
                </div>

                <div class="card border-warning">
                    <div class="card-body">
                        <h6 class="fw-bold">Detalhes do Desafio:</h6>
                        <p class="mb-1"><strong>Time Aguardando:</strong> <span id="challengeOpponentTeam"></span></p>
                        <p class="mb-1"><strong>Seu Time:</strong> @Model.UserTeam.Nome</p>
                        <p class="mb-1"><strong>Horário:</strong> <span id="challengeDateTime"></span></p>
                        <p class="mb-0"><strong>Quadra:</strong> @Model.Court.Nome</p>
                    </div>
                </div>

                <div class="mt-3">
                    <p class="text-center">
                        <strong>Tem certeza que deseja enviar este desafio?</strong><br>
                        <small class="text-muted">Esta ação não pode ser desfeita</small>
                    </p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-warning" onclick="submitChallenge()">
                    <i class="fas fa-handshake me-1"></i>Confirmar Desafio
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Sucesso -->
<div class="modal fade" id="successModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-check-circle me-2"></i>Sucesso!
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                <h5 id="successTitle"></h5>
                <p id="successMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="window.location.reload()">
                    <i class="fas fa-sync-alt me-1"></i>Atualizar Página
                </button>
                <a class="btn btn-outline-success" asp-controller="Reservation" asp-action="Index">
                    <i class="fas fa-list me-1"></i>Ver Minhas Reservas
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Erro -->
<div class="modal fade" id="errorModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle me-2"></i>Erro
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <i class="fas fa-times-circle fa-3x text-danger mb-3"></i>
                <h5>Ops! Algo deu errado</h5>
                <p id="errorMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Fechar
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="teamInfoModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="fas fa-users me-2"></i>
                    Informações do Time
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="teamInfoContent">
                <!-- Conteúdo será carregado dinamicamente -->
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                    <p class="mt-2 text-muted">Carregando informações do time...</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let selectedReservationId = null;

        // Mostrar modal de agendamento (1º time)
        function showScheduleModal(dateTime, time, dateDisplay) {
            document.getElementById('scheduleDataHora').value = dateTime;
            document.getElementById('scheduleDateTime').textContent = dateDisplay + ' às ' + time;

            const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
            modal.show();
        }

        // Mostrar modal de desafio (2º time)
        function showChallengeModal(reservationId, opponentTeam, time, dateDisplay) {
            selectedReservationId = reservationId;
            document.getElementById('challengeOpponentTeam').textContent = opponentTeam;

            if (dateDisplay) {
                document.getElementById('challengeDateTime').textContent = dateDisplay + ' às ' + time;
            } else {
                document.getElementById('challengeDateTime').textContent = time;
            }

            const modal = new bootstrap.Modal(document.getElementById('challengeModal'));
            modal.show();
        }

        // Submeter agendamento com popup de resposta
        async function submitSchedule() {
            const form = document.getElementById('scheduleForm');
            const formData = new FormData(form);

            // Mostrar loading no botão
            const submitBtn = event.target;
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Agendando...';
            submitBtn.disabled = true;

            try {
                const response = await fetch('@Url.Action("ReserveGoogleCourt")', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                // Fechar modal de agendamento
                bootstrap.Modal.getInstance(document.getElementById('scheduleModal')).hide();

                if (result.success) {
                    // Mostrar popup de sucesso
                    document.getElementById('successTitle').textContent = result.title || 'Horário Agendado!';
                    document.getElementById('successMessage').textContent = result.message;

                    const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                    successModal.show();
                } else {
                    // Mostrar popup de erro
                    document.getElementById('errorMessage').textContent = result.message || 'Erro ao agendar horário. Tente novamente.';
                    const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                    errorModal.show();
                }
            } catch (error) {
                console.error('Erro:', error);
                document.getElementById('errorMessage').textContent = 'Erro de conexão. Verifique sua internet e tente novamente.';
                const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                errorModal.show();
            } finally {
                // Restaurar botão
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        }

        // Submeter desafio com popup de resposta
        async function submitChallenge() {
            if (!selectedReservationId) {
                document.getElementById('errorMessage').textContent = 'Erro interno. Tente novamente.';
                const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                errorModal.show();
                return;
            }

            // Mostrar loading no botão
            const submitBtn = event.target;
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Enviando...';
            submitBtn.disabled = true;

            try {
                const response = await fetch('@Url.Action("AcceptGoogleCourtChallenge")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `reservationId=${selectedReservationId}`
                });

                const result = await response.json();

                // Fechar modal de desafio
                bootstrap.Modal.getInstance(document.getElementById('challengeModal')).hide();

                if (result.success) {
                    // Mostrar popup de sucesso
                    document.getElementById('successTitle').textContent = result.title || 'Desafio Enviado!';
                    document.getElementById('successMessage').textContent = result.message;

                    const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                    successModal.show();
                } else {
                    // Mostrar popup de erro
                    document.getElementById('errorMessage').textContent = result.message || 'Não foi possível enviar o desafio.';
                    const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                    errorModal.show();
                }
            } catch (error) {
                console.error('Erro:', error);
                document.getElementById('errorMessage').textContent = 'Erro de conexão. Verifique sua internet e tente novamente.';
                const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                errorModal.show();
            } finally {
                // Restaurar botão
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        }

        let hasCourtRelatedNotifications = false;

        // Função para verificar notificações relacionadas à quadra atual
        async function checkCourtNotifications() {
            try {
                const response = await fetch('/Home/GetNotifications');
                const result = await response.json();

                if (result.success && result.notifications.length > 0) {
                    const courtNotifications = result.notifications.filter(n =>
                        !n.lida &&
                        n.reservationId &&
                        (n.tipo === 'DesafioRecebido' || n.tipo === 'DesafioEnviado')
                    );

                    if (courtNotifications.length > 0 && !hasCourtRelatedNotifications) {
                        showCourtNotificationAlert(courtNotifications);
                        hasCourtRelatedNotifications = true;
                    }
                }
            } catch (error) {
                console.error('Erro ao verificar notificações da quadra:', error);
            }
        }

        // Mostrar alerta de notificação na tela da quadra
        function showCourtNotificationAlert(notifications) {
            // Criar toast de notificação
            const toastHtml = `
                                        <div class="toast align-items-center text-bg-primary border-0 position-fixed"
                                             id="courtNotificationToast"
                                             role="alert"
                                             aria-live="assertive"
                                             aria-atomic="true"
                                             style="top: 20px; right: 20px; z-index: 1055;">
                                            <div class="d-flex">
                                                <div class="toast-body">
                                                    <div class="d-flex align-items-center">
                                                        <i class="fas fa-bell me-2"></i>
                                                        <div>
                                                            <strong>${notifications[0].titulo}</strong><br>
                                                            <small>${notifications[0].mensagem}</small>
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                                        data-bs-dismiss="toast" aria-label="Close"></button>
                                            </div>
                                        </div>
                                    `;

            // Adicionar toast ao body se não existir
            if (!document.getElementById('courtNotificationToast')) {
                document.body.insertAdjacentHTML('beforeend', toastHtml);

                // Mostrar o toast
                const toastElement = document.getElementById('courtNotificationToast');
                const toast = new bootstrap.Toast(toastElement, {
                    autohide: false // Não esconder automaticamente
                });
                toast.show();

                // Adicionar classe de animação pulsante ao botão de notificações se existir
                const notificationBtn = document.getElementById('notificationsDropdown');
                if (notificationBtn) {
                    notificationBtn.classList.add('notification-pulse');
                }
            }
        }

        // Inicializar verificação de notificações quando a página carregar
        document.addEventListener('DOMContentLoaded', function () {
            // Verificar notificações imediatamente
            setTimeout(checkCourtNotifications, 1000);

            // Verificar a cada 10 segundos
            setInterval(checkCourtNotifications, 10000);
        });

        // Modificar a função submitChallenge existente para atualizar notificações
        const originalSubmitChallenge = window.submitChallenge;
        window.submitChallenge = async function () {
            // Chamar função original
            const result = await originalSubmitChallenge.apply(this, arguments);

            // Após enviar desafio, verificar notificações
            setTimeout(() => {
                checkCourtNotifications();
                // Recarregar notificações no dropdown se existir
                if (typeof loadNotifications === 'function') {
                    loadNotifications();
                }
            }, 1000);

            return result;
        };

        async function showTeamInfo(teamId, teamName) {
            // Abrir o modal imediatamente com loading
            const modal = new bootstrap.Modal(document.getElementById('teamInfoModal'));
            modal.show();

            // Resetar conteúdo para loading
            document.getElementById('teamInfoContent').innerHTML = `
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                            <p class="mt-2 text-muted">Carregando informações de ${teamName}...</p>
                        </div>
                    `;

            try {
                const response = await fetch(`/Home/GetTeamInfo?teamId=${teamId}`);
                const result = await response.json();

                if (result.success) {
                    renderTeamInfo(result);
                } else {
                    showTeamInfoError(result.message || 'Erro ao carregar informações do time.');
                }
            } catch (error) {
                console.error('Erro ao buscar informações do time:', error);
                showTeamInfoError('Erro de conexão. Tente novamente.');
            }
        }

        // Renderizar informações do time no modal
        function renderTeamInfo(data) {
            const { team, stats, proximasPartidas } = data;

            const teamInfoHtml = `
                        <div class="row">
                            <!-- Informações Básicas do Time -->
                            <div class="col-md-4">
                                <div class="text-center mb-4">
                                    ${team.fotoUrl ?
                    `<img src="${team.fotoUrl}" alt="Escudo ${team.nome}"
                                             class="rounded-circle mb-3" style="width: 100px; height: 100px; object-fit: cover;">` :
                    `<div class="rounded-circle mx-auto mb-3 d-flex align-items-center justify-content-center text-white fw-bold"
                                             style="width: 100px; height: 100px; background-color: ${team.corPrimaria}; font-size: 2rem;">
                                            ${team.nome.substring(0, 2).toUpperCase()}
                                        </div>`
                }
                                    <h4 class="fw-bold text-primary">${team.nome}</h4>
                                    <p class="text-muted small">${team.descricao}</p>
                                </div>

                                <!-- Informações Gerais -->
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="fw-bold mb-3">Informações</h6>
                                        <div class="small">
                                            <p class="mb-2"><strong>Criador:</strong> ${team.criador}</p>
                                            <p class="mb-2"><strong>Criado em:</strong> ${team.dataCriacao}</p>
                                            <p class="mb-2"><strong>Faixa etária:</strong> ${team.faixaIdade}</p>
                                            ${team.corPrimaria || team.corSecundaria ? `
                                                <div class="mb-2">
                                                    <strong>Cores:</strong>
                                                    ${team.corPrimaria ? `<span class="badge me-1" style="background-color: ${team.corPrimaria};">●</span>` : ''}
                                                    ${team.corSecundaria && team.corSecundaria !== team.corPrimaria ?
                        `<span class="badge" style="background-color: ${team.corSecundaria};">●</span>` : ''}
                                                </div>
                                            ` : ''}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Estatísticas -->
                            <div class="col-md-8">
                                <h5 class="fw-bold mb-3">
                                    <i class="fas fa-chart-bar me-2"></i>
                                    Estatísticas
                                </h5>

                                ${stats.totalPartidas > 0 ? `
                                    <!-- Estatísticas Principais -->
                                    <div class="row mb-4">
                                        <div class="col-3">
                                            <div class="text-center bg-light rounded p-3">
                                                <h4 class="text-primary mb-0">${stats.totalPartidas}</h4>
                                                <small class="text-muted">Jogos</small>
                                            </div>
                                        </div>
                                        <div class="col-3">
                                            <div class="text-center bg-success bg-opacity-10 rounded p-3">
                                                <h4 class="text-success mb-0">${stats.vitorias}</h4>
                                                <small class="text-muted">Vitórias</small>
                                            </div>
                                        </div>
                                        <div class="col-3">
                                            <div class="text-center bg-warning bg-opacity-10 rounded p-3">
                                                <h4 class="text-warning mb-0">${stats.empates}</h4>
                                                <small class="text-muted">Empates</small>
                                            </div>
                                        </div>
                                        <div class="col-3">
                                            <div class="text-center bg-danger bg-opacity-10 rounded p-3">
                                                <h4 class="text-danger mb-0">${stats.derrotas}</h4>
                                                <small class="text-muted">Derrotas</small>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Performance -->
                                    <div class="row mb-4">
                                        <div class="col-6">
                                            <div class="card border-success">
                                                <div class="card-body text-center">
                                                    <h5 class="text-success mb-1">${stats.taxaVitoria}%</h5>
                                                    <small class="text-muted">Taxa de Vitória</small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="card border-info">
                                                <div class="card-body text-center">
                                                    <h5 class="text-info mb-1">
                                                        ${stats.saldoGols >= 0 ? '+' : ''}${stats.saldoGols}
                                                    </h5>
                                                    <small class="text-muted">Saldo de Gols</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Gols -->
                                    <div class="row mb-4">
                                        <div class="col-6 text-center">
                                            <span class="fw-bold text-primary fs-4">${stats.golsFeitos}</span>
                                            <small class="text-muted d-block">Gols Feitos</small>
                                        </div>
                                        <div class="col-6 text-center">
                                            <span class="fw-bold text-danger fs-4">${stats.golsSofridos}</span>
                                            <small class="text-muted d-block">Gols Sofridos</small>
                                        </div>
                                    </div>

                                    <!-- Status Performance -->
                                    <div class="text-center">
                                        <span class="badge bg-${stats.performance === 'Excelente' ? 'success' :
                        stats.performance === 'Boa' ? 'warning' : 'secondary'} fs-6">
                                            Performance: ${stats.performance}
                                        </span>
                                    </div>
                                ` : `
                                    <div class="text-center py-4">
                                        <i class="fas fa-chart-bar fa-3x text-muted mb-3"></i>
                                        <h6 class="text-muted">Nenhuma estatística disponível</h6>
                                        <p class="text-muted small">Este time ainda não finalizou nenhuma partida.</p>
                                    </div>
                                `}

                                <!-- Próximas Partidas -->
                                ${proximasPartidas.length > 0 ? `
                                    <hr class="my-4">
                                    <h6 class="fw-bold mb-3">
                                        <i class="fas fa-calendar-alt me-2"></i>
                                        Próximas Partidas
                                    </h6>
                                    <div class="list-group list-group-flush">
                                        ${proximasPartidas.map(partida => `
                                            <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                                                <div>
                                                    <strong>${partida.dataHora}</strong><br>
                                                    <small class="text-muted">vs ${partida.oponente} • ${partida.quadra}</small>
                                                </div>
                                                <span class="badge bg-primary rounded-pill">Confirmado</span>
                                            </div>
                                        `).join('')}
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    `;

            document.getElementById('teamInfoContent').innerHTML = teamInfoHtml;
        }

        // Mostrar erro no modal
        function showTeamInfoError(message) {
            document.getElementById('teamInfoContent').innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                            <h5>Erro ao carregar informações</h5>
                            <p class="text-muted">${message}</p>
                            <button class="btn btn-primary" onclick="bootstrap.Modal.getInstance(document.getElementById('teamInfoModal')).hide()">
                                Fechar
                            </button>
                        </div>
                    `;
        }

        // Fazer escudos clicáveis quando a página carregar
        document.addEventListener('DOMContentLoaded', function () {
            // Selecionar todos os escudos de times nos jogos marcados e no calendário
            const teamElements = document.querySelectorAll('[data-team-id]');

            teamElements.forEach(element => {
                const teamId = element.getAttribute('data-team-id');
                const teamName = element.getAttribute('data-team-name');

                if (teamId && teamName) {
                    element.style.cursor = 'pointer';
                    element.title = `Clique para ver informações de ${teamName}`;

                    element.addEventListener('click', function (e) {
                        e.stopPropagation(); // Evitar outros eventos
                        showTeamInfo(teamId, teamName);
                    });

                    // Adicionar efeito hover
                    element.addEventListener('mouseenter', function () {
                        this.style.transform = 'scale(1.1)';
                        this.style.transition = 'transform 0.2s ease';
                    });

                    element.addEventListener('mouseleave', function () {
                        this.style.transform = 'scale(1)';
                    });
                }
            });
        });

    </script>
}

<style>
    .team-clickable {
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.team-clickable:hover {
    transform: scale(1.1);
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

/* Indicador visual para escudos clicáveis */
.team-clickable::after {
    content: '';
    position: absolute;
    top: -2px;
    right: -2px;
    width: 8px;
    height: 8px;
    background: #007bff;
    border: 1px solid white;
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.2s ease;
}

[data-team-id]:hover .team-clickable::after {
    opacity: 1;
}

/* Tooltip personalizado */
[data-team-id] {
    position: relative;
}

[data-team-id]:hover::before {
    content: "Clique para ver informações";
    position: absolute;
    bottom: -25px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0,0,0,0.8);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 10px;
    white-space: nowrap;
    z-index: 1000;
    animation: fadeIn 0.3s ease;
}

@@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}
    .schedule-btn:hover, .challenge-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: all 0.2s ease;
    }

    .challenge-btn {
        animation: pulse-warning 2s infinite;
    }

    pulse-warning {
        0%

    {
        box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.4);
    }

    70% {
        box-shadow: 0 0 0 10px rgba(255, 193, 7, 0);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(255, 193, 7, 0);
    }

    }

    /* Estilo para horários confirmados (travados) */
    .btn-secondary[disabled] {
        background-color: #6c757d !important;
        border-color: #6c757d !important;
        color: white !important;
    }

    .modal-content {
        border-radius: 15px;
        overflow: hidden;
    }

    .modal-header {
        border: none;
    }

    .modal-footer {
        border: none;
        background-color: #f8f9fa;
    }

    /* Loading state para botões */
    .btn[disabled] .fa-spinner {
        animation: spin 1s linear infinite;
    }

    .spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .notification-pulse {
        animation: notification-pulse 2s infinite;
    }

    .notification-pulse {
        0%

    {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.4);
        transform: scale(1);
    }

    70% {
        box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
        transform: scale(1.05);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
        transform: scale(1);
    }

    }

    /* Toast personalizado para notificações da quadra */
    #courtNotificationToast {
        min-width: 300px;
        backdrop-filter: blur(10px);
        animation: slideInRight 0.5s ease-out;
    }

    .slideInRight {
        from

    {
        transform: translateX(100%);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }

    }

    /* Destacar botões de desafio quando há notificações */
    .challenge-btn.has-notification {
        animation: challenge-highlight 3s infinite;
    }

    .challenge-highlight {
        0%, 100%

    {
        box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.4);
    }

    50% {
        box-shadow: 0 0 0 8px rgba(255, 193, 7, 0);
    }

    }
</style>